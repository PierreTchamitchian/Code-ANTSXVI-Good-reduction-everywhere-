
# Number fields downloaded from the LMFDB on 19 January 2024.
# Search link: https://www.lmfdb.org/NumberField/?degree=3&rd=1-11.1908080477
# Query "{'degree': 3, 'rd': {'$gte': 0.99999999995, '$lte': 11.190808047749998}}" returned 231 fields, sorted by degree.

# Each entry in the following data list has the form:
#    [Label, Polynomial, Discriminant, Galois group, Class group]
# For more details, see the definitions at the bottom of the file.

# To create a list of fields, type "fields = make_data()"


columns = ["label", "coeffs", "disc", "galois_label", "class_group"]
data = [
["3.1.23.1", [1, 0, -1, 1], -23, "3T2", []],
["3.1.31.1", [-1, 1, 0, 1], -31, "3T2", []],
["3.1.44.1", [1, 1, -1, 1], -44, "3T2", []],
["3.3.49.1", [1, -2, -1, 1], 49, "3T1", []],
["3.1.59.1", [-1, 2, 0, 1], -59, "3T2", []],
["3.1.76.1", [-2, -2, 0, 1], -76, "3T2", []],
["3.3.81.1", [-1, -3, 0, 1], 81, "3T1", []],
["3.1.83.1", [-2, 1, -1, 1], -83, "3T2", []],
["3.1.87.1", [1, 2, -1, 1], -87, "3T2", []],
["3.1.104.1", [-2, -1, 0, 1], -104, "3T2", []],
["3.1.107.1", [-2, 3, -1, 1], -107, "3T2", []],
["3.1.108.1", [-2, 0, 0, 1], -108, "3T2", []],
["3.1.116.1", [-2, 0, -1, 1], -116, "3T2", []],
["3.1.135.1", [-1, 3, 0, 1], -135, "3T2", []],
["3.1.139.1", [2, 1, -1, 1], -139, "3T2", []],
["3.1.140.1", [-2, 2, 0, 1], -140, "3T2", []],
["3.3.148.1", [1, -3, -1, 1], 148, "3T2", []],
["3.1.152.1", [-2, -2, -1, 1], -152, "3T2", []],
["3.3.169.1", [-1, -4, -1, 1], 169, "3T1", []],
["3.1.172.1", [3, -1, -1, 1], -172, "3T2", []],
["3.1.175.1", [-3, 2, -1, 1], -175, "3T2", []],
["3.1.199.1", [-1, 4, -1, 1], -199, "3T2", []],
["3.1.200.1", [2, 2, -1, 1], -200, "3T2", []],
["3.1.204.1", [-3, 1, -1, 1], -204, "3T2", []],
["3.1.211.1", [-3, -2, 0, 1], -211, "3T2", []],
["3.1.212.1", [-2, 4, -1, 1], -212, "3T2", []],
["3.1.216.1", [-2, 3, 0, 1], -216, "3T2", []],
["3.3.229.1", [-1, -4, 0, 1], 229, "3T2", []],
["3.1.231.1", [3, 0, -1, 1], -231, "3T2", []],
["3.1.239.1", [-3, -1, 0, 1], -239, "3T2", []],
["3.1.243.1", [-3, 0, 0, 1], -243, "3T2", []],
["3.1.244.1", [-6, 1, 0, 1], -244, "3T2", []],
["3.1.247.1", [-3, 1, 0, 1], -247, "3T2", []],
["3.1.255.1", [-3, 0, -1, 1], -255, "3T2", []],
["3.3.257.1", [3, -4, -1, 1], 257, "3T2", []],
["3.1.268.1", [5, -3, -1, 1], -268, "3T2", []],
["3.1.283.1", [-1, 4, 0, 1], -283, "3T2", [2]],
["3.1.300.1", [-3, -3, -1, 1], -300, "3T2", []],
["3.1.307.1", [2, 3, -1, 1], -307, "3T2", []],
["3.3.316.1", [2, -4, -1, 1], 316, "3T2", []],
["3.3.321.1", [1, -4, -1, 1], 321, "3T2", []],
["3.1.324.1", [-4, -3, 0, 1], -324, "3T2", []],
["3.1.327.1", [-3, -2, -1, 1], -327, "3T2", []],
["3.1.331.1", [-4, 3, -1, 1], -331, "3T2", [2]],
["3.1.335.1", [1, 4, -1, 1], -335, "3T2", []],
["3.1.339.1", [4, -1, -1, 1], -339, "3T2", []],
["3.1.351.1", [-3, 3, 0, 1], -351, "3T2", []],
["3.1.356.1", [7, 1, -1, 1], -356, "3T2", []],
["3.3.361.1", [7, -6, -1, 1], 361, "3T1", []],
["3.1.364.1", [-2, 4, 0, 1], -364, "3T2", []],
["3.1.367.1", [3, 2, -1, 1], -367, "3T2", []],
["3.1.379.1", [-4, 1, -1, 1], -379, "3T2", []],
["3.3.404.1", [-1, -5, -1, 1], 404, "3T2", []],
["3.1.411.1", [-2, 5, -1, 1], -411, "3T2", []],
["3.1.419.1", [-5, -4, 0, 1], -419, "3T2", []],
["3.1.424.1", [8, 0, -1, 1], -424, "3T2", []],
["3.1.431.1", [-8, -1, 0, 1], -431, "3T2", []],
["3.1.436.1", [-4, 1, 0, 1], -436, "3T2", []],
["3.1.439.1", [5, -2, -1, 1], -439, "3T2", []],
["3.1.440.1", [-8, 2, 0, 1], -440, "3T2", []],
["3.1.451.1", [8, -5, -1, 1], -451, "3T2", []],
["3.1.459.1", [-8, 3, 0, 1], -459, "3T2", []],
["3.1.460.1", [-3, 5, -1, 1], -460, "3T2", []],
["3.3.469.1", [4, -5, -1, 1], 469, "3T2", []],
["3.1.472.1", [-6, -5, 0, 1], -472, "3T2", []],
["3.3.473.1", [-1, -5, 0, 1], 473, "3T2", []],
["3.1.484.1", [2, 4, -1, 1], -484, "3T2", []],
["3.1.491.1", [4, 1, -1, 1], -491, "3T2", [2]],
["3.1.492.1", [3, 3, -1, 1], -492, "3T2", []],
["3.1.499.1", [-3, 4, 0, 1], -499, "3T2", []],
["3.1.503.1", [8, 2, -1, 1], -503, "3T2", []],
["3.1.515.1", [-4, -1, -1, 1], -515, "3T2", []],
["3.1.516.1", [-9, 1, -1, 1], -516, "3T2", []],
["3.1.519.1", [7, -4, -1, 1], -519, "3T2", []],
["3.1.524.1", [-5, 3, -1, 1], -524, "3T2", []],
["3.1.527.1", [-1, 5, 0, 1], -527, "3T2", []],
["3.1.543.1", [-5, 2, -1, 1], -543, "3T2", []],
["3.1.547.1", [-4, -3, -1, 1], -547, "3T2", []],
["3.1.563.1", [-4, 5, -1, 1], -563, "3T2", [2]],
["3.3.564.1", [3, -5, -1, 1], 564, "3T2", []],
["3.1.567.1", [-5, -3, 0, 1], -567, "3T2", []],
["3.3.568.1", [-2, -6, -1, 1], 568, "3T2", []],
["3.1.588.1", [1, 5, -1, 1], -588, "3T2", [3]],
["3.1.620.1", [-5, -5, -1, 1], -620, "3T2", []],
["3.3.621.1", [-3, -6, 0, 1], 621, "3T2", []],
["3.1.628.1", [8, 4, -1, 1], -628, "3T2", []],
["3.1.643.1", [-5, -2, 0, 1], -643, "3T2", [2]],
["3.1.648.1", [-10, -3, 0, 1], -648, "3T2", [3]],
["3.1.652.1", [5, 7, -1, 1], -652, "3T2", []],
["3.1.655.1", [5, 0, -1, 1], -655, "3T2", []],
["3.1.671.1", [-5, -1, 0, 1], -671, "3T2", []],
["3.1.675.1", [-5, 0, 0, 1], -675, "3T2", []],
["3.1.676.1", [12, -4, -1, 1], -676, "3T2", [3]],
["3.1.679.1", [-5, 1, 0, 1], -679, "3T2", []],
["3.1.680.1", [10, -6, -1, 1], -680, "3T2", []],
["3.1.687.1", [3, 4, -1, 1], -687, "3T2", []],
["3.1.695.1", [-5, 0, -1, 1], -695, "3T2", []],
["3.1.696.1", [6, -2, -1, 1], -696, "3T2", []],
["3.3.697.1", [-5, -7, 0, 1], 697, "3T2", []],
["3.1.707.1", [-5, 2, 0, 1], -707, "3T2", []],
["3.1.716.1", [-6, -4, 0, 1], -716, "3T2", []],
["3.1.728.1", [-2, 6, -1, 1], -728, "3T2", []],
["3.1.731.1", [4, 3, -1, 1], -731, "3T2", [2]],
["3.3.733.1", [8, -7, -1, 1], 733, "3T2", []],
["3.1.743.1", [-3, 5, 0, 1], -743, "3T2", []],
["3.1.744.1", [-6, -6, -1, 1], -744, "3T2", []],
["3.1.748.1", [5, 1, -1, 1], -748, "3T2", []],
["3.1.751.1", [-1, 6, -1, 1], -751, "3T2", [2]],
["3.1.755.1", [2, 5, -1, 1], -755, "3T2", []],
["3.1.756.1", [-12, -6, 0, 1], -756, "3T2", []],
["3.3.756.1", [-2, -6, 0, 1], 756, "3T2", []],
["3.1.759.1", [-3, 6, -1, 1], -759, "3T2", []],
["3.3.761.1", [-1, -6, -1, 1], 761, "3T2", []],
["3.1.771.1", [-6, 3, -1, 1], -771, "3T2", []],
["3.1.780.1", [-5, -1, -1, 1], -780, "3T2", []],
["3.3.785.1", [5, -6, -1, 1], 785, "3T2", []],
["3.3.788.1", [-3, -7, -1, 1], 788, "3T2", []],
["3.1.804.1", [-6, 4, -1, 1], -804, "3T2", []],
["3.1.808.1", [-6, 2, -1, 1], -808, "3T2", []],
["3.1.812.1", [-7, -7, -1, 1], -812, "3T2", []],
["3.1.815.1", [-9, -7, 0, 1], -815, "3T2", []],
["3.1.823.1", [-7, -5, 0, 1], -823, "3T2", []],
["3.1.835.1", [6, -1, -1, 1], -835, "3T2", []],
["3.3.837.1", [-1, -6, 0, 1], 837, "3T2", []],
["3.1.839.1", [-5, -2, -1, 1], -839, "3T2", []],
["3.1.843.1", [12, -2, -1, 1], -843, "3T2", []],
["3.1.856.1", [11, 1, -1, 1], -856, "3T2", []],
["3.1.863.1", [5, 2, -1, 1], -863, "3T2", []],
["3.1.867.1", [-12, 6, -1, 1], -867, "3T2", []],
["3.1.876.1", [-11, -1, -1, 1], -876, "3T2", []],
["3.1.883.1", [-12, 2, -1, 1], -883, "3T2", []],
["3.1.888.1", [3, 9, -1, 1], -888, "3T2", []],
["3.1.891.1", [-1, 6, 0, 1], -891, "3T2", [3]],
["3.3.892.1", [10, -8, -1, 1], 892, "3T2", []],
["3.1.907.1", [12, -7, -1, 1], -907, "3T2", []],
["3.1.908.1", [-12, -4, 0, 1], -908, "3T2", []],
["3.1.931.1", [-6, 5, -1, 1], -931, "3T2", [3]],
["3.1.932.1", [-4, 5, 0, 1], -932, "3T2", []],
["3.1.940.1", [-6, -2, 0, 1], -940, "3T2", []],
["3.3.940.1", [-4, -7, 0, 1], 940, "3T2", []],
["3.1.948.1", [6, 0, -1, 1], -948, "3T2", []],
["3.1.959.1", [1, 6, -1, 1], -959, "3T2", []],
["3.3.961.1", [8, -10, -1, 1], 961, "3T1", []],
["3.1.964.1", [-12, -2, 0, 1], -964, "3T2", []],
["3.1.971.1", [-12, -1, 0, 1], -971, "3T2", []],
["3.1.972.1", [-12, 0, 0, 1], -972, "3T2", []],
["3.1.972.2", [-6, 0, 0, 1], -972, "3T2", []],
["3.1.980.1", [-13, 5, -1, 1], -980, "3T2", [3]],
["3.1.983.1", [-5, 6, -1, 1], -983, "3T2", []],
["3.1.984.1", [-12, 0, -1, 1], -984, "3T2", []],
["3.3.985.1", [1, -6, -1, 1], 985, "3T2", []],
["3.3.993.1", [3, -6, -1, 1], 993, "3T2", []],
["3.1.996.1", [-6, 0, -1, 1], -996, "3T2", []],
["3.1.999.1", [-12, 3, 0, 1], -999, "3T2", []],
["3.1.1004.1", [-6, 2, 0, 1], -1004, "3T2", []],
["3.1.1007.1", [7, -2, -1, 1], -1007, "3T2", []],
["3.1.1011.1", [-6, -5, -1, 1], -1011, "3T2", []],
["3.3.1016.1", [2, -6, -1, 1], 1016, "3T2", []],
["3.1.1036.1", [-12, 4, 0, 1], -1036, "3T2", []],
["3.1.1048.1", [-12, 8, -1, 1], -1048, "3T2", []],
["3.1.1055.1", [16, -6, -1, 1], -1055, "3T2", []],
["3.1.1059.1", [6, 1, -1, 1], -1059, "3T2", []],
["3.1.1067.1", [-7, -4, 0, 1], -1067, "3T2", []],
["3.1.1068.1", [13, -1, -1, 1], -1068, "3T2", []],
["3.1.1075.1", [12, 2, -1, 1], -1075, "3T2", []],
["3.3.1076.1", [-6, -8, 0, 1], 1076, "3T2", []],
["3.1.1080.1", [-6, 3, 0, 1], -1080, "3T2", []],
["3.1.1083.1", [-12, -6, -1, 1], -1083, "3T2", [3]],
["3.1.1087.1", [-7, 4, -1, 1], -1087, "3T2", []],
["3.1.1096.1", [-13, 1, -1, 1], -1096, "3T2", []],
["3.1.1099.1", [-6, -1, -1, 1], -1099, "3T2", [2]],
["3.3.1101.1", [12, -9, -1, 1], 1101, "3T2", []],
["3.1.1107.1", [-3, 6, 0, 1], -1107, "3T2", [2]],
["3.1.1108.1", [14, -8, -1, 1], -1108, "3T2", []],
["3.3.1129.1", [-3, -7, 0, 1], 1129, "3T2", []],
["3.1.1135.1", [11, -6, -1, 1], -1135, "3T2", []],
["3.1.1144.1", [2, 6, -1, 1], -1144, "3T2", []],
["3.1.1147.1", [8, -3, -1, 1], -1147, "3T2", []],
["3.1.1164.1", [7, -1, -1, 1], -1164, "3T2", []],
["3.1.1172.1", [11, 5, -1, 1], -1172, "3T2", []],
["3.1.1175.1", [-5, 5, 0, 1], -1175, "3T2", []],
["3.1.1176.1", [-6, -2, -1, 1], -1176, "3T2", [3]],
["3.1.1187.1", [-2, 7, -1, 1], -1187, "3T2", []],
["3.1.1188.1", [-12, 6, 0, 1], -1188, "3T2", []],
["3.1.1191.1", [-11, -10, -1, 1], -1191, "3T2", []],
["3.1.1192.1", [6, 2, -1, 1], -1192, "3T2", [2]],
["3.1.1196.1", [-7, 5, -1, 1], -1196, "3T2", []],
["3.1.1203.1", [-6, -3, -1, 1], -1203, "3T2", []],
["3.1.1207.1", [-7, -6, -1, 1], -1207, "3T2", []],
["3.1.1208.1", [8, 8, -1, 1], -1208, "3T2", []],
["3.1.1219.1", [-11, -8, 0, 1], -1219, "3T2", []],
["3.1.1228.1", [-7, 1, -1, 1], -1228, "3T2", [3]],
["3.1.1228.2", [-1, 7, -1, 1], -1228, "3T2", [3]],
["3.1.1228.3", [-6, 4, 0, 1], -1228, "3T2", [3]],
["3.3.1229.1", [6, -7, -1, 1], 1229, "3T2", []],
["3.1.1231.1", [9, -4, -1, 1], -1231, "3T2", []],
["3.1.1235.1", [10, -5, -1, 1], -1235, "3T2", []],
["3.1.1236.1", [12, 4, -1, 1], -1236, "3T2", []],
["3.1.1255.1", [5, 4, -1, 1], -1255, "3T2", [2]],
["3.3.1257.1", [9, -8, -1, 1], 1257, "3T2", []],
["3.1.1259.1", [16, -9, -1, 1], -1259, "3T2", []],
["3.1.1267.1", [-4, 7, -1, 1], -1267, "3T2", []],
["3.1.1272.1", [15, -3, -1, 1], -1272, "3T2", []],
["3.1.1291.1", [-7, -2, 0, 1], -1291, "3T2", []],
["3.1.1292.1", [-14, -10, 0, 1], -1292, "3T2", []],
["3.1.1295.1", [7, 0, -1, 1], -1295, "3T2", []],
["3.1.1300.1", [-13, -3, -1, 1], -1300, "3T2", []],
["3.3.1300.1", [-10, -10, 0, 1], 1300, "3T2", []],
["3.3.1304.1", [-2, -11, 0, 1], 1304, "3T2", []],
["3.1.1315.1", [-12, 7, 0, 1], -1315, "3T2", []],
["3.1.1316.1", [7, 9, -1, 1], -1316, "3T2", []],
["3.1.1319.1", [-7, -1, 0, 1], -1319, "3T2", []],
["3.1.1323.1", [-7, 0, 0, 1], -1323, "3T2", [3]],
["3.1.1327.1", [-7, 1, 0, 1], -1327, "3T2", []],
["3.1.1336.1", [-13, 9, -1, 1], -1336, "3T2", []],
["3.3.1345.1", [-1, -7, 0, 1], 1345, "3T2", []],
["3.1.1347.1", [-8, -7, -1, 1], -1347, "3T2", []],
["3.1.1351.1", [-7, 0, -1, 1], -1351, "3T2", []],
["3.1.1355.1", [-7, 2, 0, 1], -1355, "3T2", []],
["3.1.1356.1", [21, 1, -1, 1], -1356, "3T2", [3]],
["3.1.1356.2", [1, 11, -1, 1], -1356, "3T2", [3]],
["3.1.1356.3", [-15, 3, -1, 1], -1356, "3T2", [3]],
["3.1.1363.1", [-10, -9, -1, 1], -1363, "3T2", []],
["3.3.1369.1", [-11, -12, -1, 1], 1369, "3T1", []],
["3.1.1371.1", [6, 3, -1, 1], -1371, "3T2", [4]],
["3.3.1373.1", [-5, -8, 0, 1], 1373, "3T2", []],
["3.1.1383.1", [3, 6, -1, 1], -1383, "3T2", []],
["3.3.1384.1", [14, -10, -1, 1], 1384, "3T2", []],
["3.1.1388.1", [-5, 7, -1, 1], -1388, "3T2", []],
["3.3.1396.1", [5, -7, -1, 1], 1396, "3T2", []],
["3.1.1399.1", [-1, 7, 0, 1], -1399, "3T2", [2]]
]

ZZx.<x> = ZZ[]


def create_record(row):
    out = {col: val for col, val in zip(columns, row)}
    poly = ZZx(out["coeffs"])
    out["poly"] = poly
    field.<a> = NumberField(poly)
    out["field"] = field
    return out

def make_data():
    return [create_record(row) for row in data]


# Label --
#    Each (global) number field has a unique label of the form d.r.D.i where
#    <ul>
#    <li>\(d\) is the degree;
#    <li>\(r\) is the real signature;  the full signature is therefore \([r,(d-r)/2]\);
#    <li>\(D\) is the absolute value of the discriminant;
#    <li>\(i\) is the index, counting from 1.  This is in case there is more than one
#      field with the same signature and absolute value of the
#      discriminant: for example <a href="/NumberField/4.0.1008.1">4.0.1008.1</a> and <a href="/NumberField/4.0.1008.2">4.0.1008.2</a>.
#    </ul>
#    The discriminant portion of the label can take the form \(a_1\) e \(\epsilon_1\) _ \(a_2\) e \(\epsilon_2\) _ \(\cdots\) _ \(a_k\) e \(\epsilon_k\) to mean the absolute value of the
#    discriminant equals \(a_1^{\epsilon_1}a_2^{\epsilon_2}\cdots a_k^{\epsilon_k}\).  The separators are the letter e and the underscore symbol.


#Polynomial (coeffs) --
#    A **defining polynomial** of a number field $K$ is an irreducible polynomial $f\in\Q[x]$ such that $K\cong \mathbb{Q}(a)$, where $a$ is a root of $f(x)$. Equivalently, it is a polynomial $f\in \Q[x]$ such that $K \cong \Q[x]/(f)$.

#    A root \(a \in K\) of the defining polynomial is a generator of \(K\).

#    {# original author: john.jones #}


#Galois group (galois_label) --
#    Let $K$ be a finite degree $n$ separable extension of a field $F$, and $K^{gal}$ be its
#    Galois (or normal) closure.
#    The **Galois group** for $K/F$ is the automorphism group $\Aut(K^{gal}/F)$.

#    This automorphism group acts on the $n$ embeddings $K\hookrightarrow K^{gal}$ via composition.  As a result, we get an injection $\Aut(K^{gal}/F)\hookrightarrow S_n$, which is well-defined up to the labelling of the $n$ embeddings, which corresponds to being well-defined up to conjugation in $S_n$.

#    We use the notation $\Gal(K/F)$ for $\Aut(K/F)$ when $K=K^{gal}$.

#    There is a naming convention for Galois groups up to degree $47$.





#Class group (class_group) --
#    The **ideal class group** of a number field $K$ with ring of integers $O_K$ is the group of equivalence classes of ideals, given by the quotient of the multiplicative group of all fractional ideals of $O_K$ by the subgroup of principal fractional ideals.

#    Since $K$ is a number field, the ideal class group of $K$ is a finite abelian group, and so has the structure of a product of cyclic groups encoded by a finite list $[a_1,\dots,a_n]$, where the $a_i$ are positive integers with $a_i\mid a_{i+1}$ for $1\le i<n$.


